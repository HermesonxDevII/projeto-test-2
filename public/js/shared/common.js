function loading() {
    $('#loading_modal').modal('toggle');
}

$('.expand-profile, .expand-profile-mobile').click(function (e) {
    $(this).find('i').toggleClass('fa-angle-down').toggleClass('fa-angle-up');
    $('.data-collapse').slideToggle('slow');
});

function showAlertModal(message) {
    let modal = $('#alert_modal');

    if (isValidVariable(message)) {
        modal.find('#message').text(message);
        modal.modal('show');
    }
}

function bytesToSize(bytes) {
    let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    if (bytes == 0) {
        return 'n/a';
    }

    let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    if (i == 0) {
        return bytes + ' ' + sizes[i];
    }
    return (bytes / Math.pow(1024, i)).toFixed(1) + ' ' + sizes[i];
};

function initialUpper(text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
}

function select2Setup() {
    $('.select2').select2();
}

function copyElementText(elementId) {
    let range = document.createRange();
    range.selectNode(document.getElementById(elementId));
    window.getSelection().removeAllRanges();
    window.getSelection().addRange(range);
    document.execCommand("copy");
    window.getSelection().removeAllRanges();
};

function chooseStudent() {
    $.ajax({
        url: `/users/getStudents`,
        type: 'GET',
        success: function (response) {
            let students = $('#choose_student_modal .modal-body .students');

            students.html('');
            response.forEach(element => {
                students.append(`
                    <div class="col-5 row text-center justify-content-center student"
                        id="student-${element.id}" onclick="">
                        <img src="/images/avatars/avatar${element.avatar_id}.svg" class="student-avatar"
                            alt="Student Avatar">
                        <span class="pt-3 student-name">
                            <b>${element.full_name}</b>
                        </span>
                        <span class="mb-3">Aluno(a)</span>
                    </div>
                `);
            });

            $('#choose_student_modal').modal('show');
        }
    });
}

function closeAllModals() {
    $('.modal').each(function (index, value) {
        $(value).modal('hide');
    });
}

var Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true,
    didOpen: (toast) => {
        toast.addEventListener('mouseenter', Swal.stopTimer)
        toast.addEventListener('mouseleave', Swal.resumeTimer)
    }
});

// FUNCTIONS TO GET SESSION VALUES
var user_role, user_id, student;

function getUserRole() {
    let that = this;

    $.ajax({
        url: `/session/getUserRole`,
        async: false,
        type: 'GET',
        success: function (response) {
            that.user_role = response;
        }
    });
}

function getUserId() {
    let that = this;

    $.ajax({
        url: `/session/getUserId`,
        async: false,
        type: 'GET',
        success: function (response) {
            that.user_id = response;
        }
    });
}

function getStudent() {
    let that = this;

    $.ajax({
        url: `/session/getStudent`,
        async: false,
        type: 'GET',
        success: function (response) {
            that.student = response;
        }
    });
}

$('document').ready(function () {
    showRecentNotifications();
    showNotificationsCounter();
});

$(function () {
    $('[data-toggle="tooltip"]').tooltip();
});

$(function () {
    $('[data-toggle="popover"]').popover();
});

moment.locale('pt-br');

function formatIframe(iframeCode) {
    // Pick only iframe tag, forget all unnecessary extra HTML (ex: generated by Vimeo)
    let iframe = $(`<div>${iframeCode}</div>`).find('iframe');

    if (iframe.length == 0) {
        return false;
    }

    return iframe.get(0).outerHTML;
}

function notify(message = '', status = 'success') {
    Toast.fire({
        icon: status,
        title: message
    });
}

function isHTML(str) {
    var a = document.createElement('div');
    a.innerHTML = str;

    for (var c = a.childNodes, i = c.length; i--; ) {
      if (c[i].nodeType == 1) return true;
    }

    return false;
}

function validateHTML(html) {
    if(!isHTML(html)) {
        return false;
    }
    let doc = document.createElement('div');
    doc.innerHTML = html;
    return ( doc.innerHTML === html );
}

var recentNotifications = [];

function subscribeToCourses() {
    $.ajax({
        type: 'GET',
        headers: { 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') },
        url: `/students/getCoursesOfSelectedStudent`,
        success: function(response) {

            response.map(course => {
                pusher.subscribe(`course-${course.id}-notifications`);
            });

            var callback = (data) => {
                localStorage.setItem('is-read-notifications', 0);

                let notificationExists = recentNotifications.filter(function(obj) {
                    return data.id == obj.id;
                });

                if(notificationExists.length == 0) {
                    recentNotifications.push(data);
                }

                console.log(data);
                localStorage.setItem('recent-notifications', JSON.stringify(recentNotifications));
                showNotificationsCounter();
                showRecentNotifications();
            };

            pusher.bind('App\\Events\\CourseStartNotification', callback);
        },
        error: function(error) {
            showAlertModal('Houve um erro ao configurar as notificações.');
        }
    });
}

function unsubscribeFromCourses() {
    return new Promise ((resolve) => {
        $.ajax({
            type: 'GET',
            headers: { 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') },
            url: `/students/getCoursesOfSelectedStudent`,
            success: function(response) {
                response.map(course => {
                    console.log('unsubscribing from ' + `course-${course.id}-notifications` )
                    pusher.unsubscribe(`course-${course.id}-notifications`);
                });
                localStorage.clear();
                resolve(response);
            },
            error: function(error) {
                showAlertModal('Houve um erro ao configurar as notificações.');
            }
        });
    })
}


function getWeeklyNotificationsByStudentSelected(course_type) {
    let notificacoes = $('.notification-list'),
        bubbleCounter = $('#notification-counter');

    $('#notification-dropdown').toggleClass('d-none');
    bubbleCounter.addClass('d-none');
    bubbleCounter.text(0);

    localStorage.setItem('is-read-notifications', 1);

    $.ajax({
        type: 'GET',
        headers: { 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') },
        url: `/students/getWeeklyNotificationsByStudentSelected/${course_type}`,
        beforeSend: function() {
            notificacoes.html('<img class="notification-loading" src="images/loading.svg"/>');
        },
        success: function(response) {
            notificacoes.html('');
            response.map(course => {
                notificacoes.append(`
                    <div class="notification">
                        <span>${course.date}</span>
                        <b>${course.title}</b>
                        <p>${course.message}</p>
                    </div>
                `);
            })
            if(response.length == 0) {
                notificacoes.html('<p class="pt-4 m-2">Sem notificações.</p>');
            }
        },
        error: function(error) {
            showAlertModal('Houve um erro ao carregar as notificações.');
        }
    });
}

function getRecentNotifications() {
    return JSON.parse(localStorage.getItem('recent-notifications') ?? '[]');
}

function showRecentNotifications() {
    let notifications = getRecentNotifications();

    if(notifications != null) {
        notifications.forEach(function (notification, index) {
            if (notification != null) {
                let hasNotification = $('#courses-notifications').find(`#course-${notification.id}-start-notification`);

                if (hasNotification.length == 0) {
                    $('#courses-notifications').append(`
                        <div class="alert alert-warning alert-dismissible fade show live-alert" role="alert"
                            id="course-${notification.id}-start-notification">
                            <img src="/images/live-badge.svg" alt="Live Icon Badge">
                            Sua aula ao vivo <b>${notification.name}</b> vai começar em breve.
                            <a href="${notification.link}" target="_blank" class="${notification.link == null ? 'd-none' : ''}">Assistir aula</a>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"
                            onclick="removeCourseNotificationById(${notification.id})" >
                            </button>
                        </div>
                    `);

                    // Delay of 10 minutes to remove notification (600000 miliseconds)
                    $(`#course-${notification.id}-start-notification`).delay(600000).fadeOut(1000, function() {
                        $(this).remove();
                        removeCourseNotificationById(notification.id);
                    });
                }
            }
        });
    }

}

function isReadNotifications() {
    let isRead = localStorage.getItem('is-read-notifications');
    return parseInt(isRead ?? 1);
}

function showNotificationsCounter() {
    let recentNotifications = getRecentNotifications(),
        bubbleCounter = $('#notification-counter');

    if (!isReadNotifications()) {
        bubbleCounter.removeClass('d-none');
        bubbleCounter.text(recentNotifications.length <= 9 ? recentNotifications.length : '9+');
    }

    if(recentNotifications.length == 0) {
        bubbleCounter.addClass('d-none');
    }

}

function removeAllRecentNotifications() {
    localStorage.removeItem('recent-notifications');
}

function removeCourseNotificationById(idCourse) {
    let recentNotifications = getRecentNotifications();

    recentNotifications.forEach(function (value, index) {
        if (value.id == idCourse) {
            recentNotifications.splice(index, 1);
        }
     });

    localStorage.setItem('recent-notifications', JSON.stringify(recentNotifications));
    showNotificationsCounter();
}

$(document).on('click', '.logout-system', function(event){
    event.preventDefault();
    let modal = $('#logout_modal');
    modal.modal('show');
})

$(document).on('click', '#logout_system_confirm', async function(){
    $(this).attr('disabled', true);
    await unsubscribeFromCourses();
    $('#logout-form').submit();
})

var recentChatMessages = []; // Para armazenar as mensagens do chat em localStorage

function getChatMessages() {
    // Esta função simulará a obtenção de mensagens do chat
    // Em um ambiente real, você faria uma requisição AJAX para uma rota específica
    // para buscar as mensagens do chat do banco de dados.
    console.log("Fetching chat messages...");

    // Simulação de dados de chat
    const simulatedChatData = [
        {
            id: 1,
            sender: "Professor Alex",
            message: "Você fez um excelente trabalho",
            time: "9h",
            unread: 2,
        },
        {
            id: 2,
            sender: "Turma nº1",
            message: "Letícia: Essa é a última mensagem do",
            time: "10h",
            unread: 2,
        },
        {
            id: 3,
            sender: "Turma nº2",
            message: "Nome: Essa é a última mensagem do",
            time: "11h",
            unread: 2,
        },
        {
            id: 4,
            sender: "Turma nº3",
            message: "Cleber: Essa é a última mensagem do chat que está...",
            time: "1d",
            unread: 2,
        },
    ];

    return new Promise((resolve) => {
        setTimeout(() => { // Simula um atraso de rede
            resolve(simulatedChatData);
        }, 500);
    });
}

function showChatMessages() {
    let chatList = $('.chat-list'),
        bubbleCounter = $('#chat-message-counter');

    // Alternar a visibilidade do dropdown
    $('#chat-dropdown').toggleClass('d-none');

    // Marcar mensagens como lidas e ocultar o contador ao abrir o chat
    bubbleCounter.addClass('d-none');
    bubbleCounter.text(0);
    localStorage.setItem('is-read-chat-messages', 1);

    // Se o dropdown for aberto, busque e exiba as mensagens
    if (!$('#chat-dropdown').hasClass('d-none')) {
        chatList.html('<img class="notification-loading" src="images/loading.svg"/>'); // Mostrar loader

        getChatMessages().then(messages => {
            chatList.html(''); // Limpar loader

            if (messages.length === 0) {
                chatList.html('<p class="pt-4 m-2">Sem mensagens.</p>');
            } else {
                messages.forEach(chat => {
                    chatList.append(`
                        <div class="chat-item d-flex align-items-center py-2 px-3 mb-2" style="background-color: #f7f7f7; border-radius: 8px; position: relative;">
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="fw-bold">${chat.sender}</span>
                                    <span class="text-muted" style="font-size: 0.8em;">${chat.time}</span>
                                </div>
                                <p class="text-truncate m-0" style="font-size: 0.9em;">${chat.message}</p>
                            </div>
                            <span class="badge rounded-pill bg-danger ms-2" style="font-size: 0.7em;">${chat.unread}</span>
                        </div>
                    `);
                });
            }
        }).catch(error => {
            showAlertModal('Houve um erro ao carregar as mensagens do chat.');
        });
    }
}

function getRecentChatMessages() {
    return JSON.parse(localStorage.getItem('recent-chat-messages') ?? '[]');
}

function isReadChatMessages() {
    let isRead = localStorage.getItem('is-read-chat-messages');
    return parseInt(isRead ?? 1); // Por padrão, considera como lido
}

function showChatMessagesCounter() {
    let recentMessages = getRecentChatMessages(),
        bubbleCounter = $('#chat-message-counter');

    if (!isReadChatMessages() && recentMessages.length > 0) {
        bubbleCounter.removeClass('d-none');
        bubbleCounter.text(recentMessages.length <= 9 ? recentMessages.length : '9+');
    } else {
        bubbleCounter.addClass('d-none');
    }
}

// Para simular a chegada de novas mensagens (via Pusher ou polling)
function addNewChatMessage(messageData) {
    let recentMessages = getRecentChatMessages();
    recentMessages.push(messageData);
    localStorage.setItem('recent-chat-messages', JSON.stringify(recentMessages));
    localStorage.setItem('is-read-chat-messages', 0); // Marcar como não lido
    showChatMessagesCounter();
}

// Event listener para o clique no ícone do chat
$(document).ready(function() {
    // Inicializa o contador de mensagens ao carregar a página
    showChatMessagesCounter();

    $('#chat-notification-wrapper .navbar-item').on('click', function() {
        showChatMessages();
    });

    // Fechar o dropdown do chat quando clicar fora
    $(document).on('click', function(event) {
        if (!$(event.target).closest('#chat-notification-wrapper').length &&
            !$(event.target).closest('.chat-dropdown').length &&
            !$('#chat-dropdown').hasClass('d-none')) {
            $('#chat-dropdown').addClass('d-none');
        }
    });

    // Simulação de uma nova mensagem chegando após 5 segundos
    // Em um ambiente real, isso viria do Pusher ou de uma API
    setTimeout(() => {
        addNewChatMessage({
            id: 5,
            sender: "Novo Contato",
            message: "Olá! Tudo bem?",
            time: "Agora",
            unread: 1,
        });
    }, 5000);
});